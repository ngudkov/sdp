#!/usr/bin/env python3

from __future__ import annotations

from abstract_workers import WorkerCreator
from concrete_workers import ManagerCreator, DocManCreator

"""
Паттерн "Фабричный метод" это порождающий паттерн проектирования,
который определяет общий интерфейс для создания объектов в суперклассе,
позволяя подклассам изменять тип создаваемых объектов.

Суть паттерна:
Предоставить единый интерфейс создания экземпляров разных классов

Пример задачи:
Допустим у нас есть государственная IT компания, который не производит ничего кроме
документов.
В департаменте есть 3 типа сотрудников:
1) Документалисты - производят документы
2) Управляющие - производят документы


Необходимо реализовать код имитирующий их работу, с возможностью добавить новый тип
сотрудников (программист, devops, админ) с минимальными изменениями интерфейса создания сотрудников

"""


def meeting(worker: WorkerCreator) -> None:
    """
    Клиентский код подкидывает в топку идею о необходимости совещания
    """

    print(f'Клиентский код. Который не знает про совещания: '  f'{WorkerCreator.work(worker)}', end='')


if __name__ == "__main__":
    print('Управляющий идёт на совещание')
    meeting(ManagerCreator())
    print('\n')

    print('Документалист идёт на совещание')
    meeting(DocManCreator())
